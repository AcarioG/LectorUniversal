@page "/books/edit/{BookId:int}"
@inject IRepository repository
@inject IShowMessages showMessage
@inject NavigationManager navigationManager
@attribute [Authorize(Roles ="admin")]


@if (Book == null)
{
    <text>Cargando.....</text>
}
else
{
    <BooksForm Book="Book" OnValidSubmit="Edit" 
           GendersNotSelected="GenderNotSelected"
           GendersSelected="GenderSelected"></BooksForm>
}

@code {
    [Parameter] public int BookId{ get; set; }
    Book Book; 
    private List<Gender> GenderSelected = new List<Gender>();
    private List<Gender> GenderNotSelected = new List<Gender>();

    protected async override Task OnInitializedAsync()
    {
        var httpResponse = await repository.Get<BookUpdateDTO>($"api/books/update/{BookId}");

        if (httpResponse.Error)
        {
            if (httpResponse.HttpResponseMessage.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                navigationManager.NavigateTo("books");
            }
            else
            {
                await showMessage.ShowErrorMessage(await httpResponse.GetBody());
            }
        }
        else
        {
            var model = httpResponse.Response;
            GenderNotSelected = model.GendersNotSelected;
            GenderSelected = model.GendersSelected;
            Book = model.Book;
        }
    }

    private async Task Edit()
    {
        var httpResponse = await repository.Put("api/books", Book);
        if (httpResponse.Error)
        {
            await showMessage.ShowErrorMessage(await httpResponse.GetBody());
        }
        else
        {
            navigationManager.NavigateTo($"books/{BookId}");
        }
    }
}
