@page "/books/create"
@inject IRepository repository
@inject NavigationManager navigationManager
@inject IShowMessages showMessages


<h3>Create</h3>
@if (@MostrarForm != false)
{
    <BooksForm OnValidSubmit="CreateBook" Book="Book" GendersNotSelected="GendersNotSelected"/>
}
else
{
    <text>Cargando..</text>
}


@code {
    private bool MostrarForm { get; set; } = false;
    private Book Book = new Book();
    private List<Gender> GendersNotSelected = new List<Gender>();

    protected async override Task OnInitializedAsync()
    {
        var responseHttp = await repository.Get<List<Gender>>("api/genders");
        GendersNotSelected = responseHttp.Response;

        StateHasChanged();
        MostrarForm = true;
    }

    private async Task CreateBook()
    {
        var httpResponse = await repository.Post<Book,int>("api/books", Book);

        if (httpResponse.Error)
        {
            var body = await httpResponse.GetBody();
            await showMessages.ShowErrorMessage(body);
        }
        else
        {
            var bookId = httpResponse.Response;
            navigationManager.NavigateTo($"books/{bookId}/{Book?.Name?.Replace(" ", "-").Replace(":","").Replace("#","")}");
            await showMessages.ShowSuccessMessage($"Comic {Book?.Name} creado con exito");
        }
    }
}
