@page "/books/{Id:int}"
@page "/books/{Id:int}/{BookName}"
@inject IRepository repository
@inject NavigationManager navigateManager
@inject IShowMessages showMessages
@inject AuthenticationStateProvider AuthenticationStateProvider


@if (model == null)
{
    <p>Cargando..</p>
}
else
{
    <MudPaper Outlined="true" >
        <MudImage Src="@model.Book.Cover" Width="230" Style="margin-top:10px; margin-bottom:5px; margin-left:10px; margin-right:5px;" />
        <MudDivider Vertical="true" FlexItem="true" Light="true" Style="background-color:black" />
        <text>Hi</text>
        <Rating OnVote="OnVote" ScoreSelected="@model.UserVote" />

    </MudPaper>
    <div class="col-md-6">
        <br/>
        <AuthorizeView Roles="admin">
            <Authorized>
                <a href="/chapter/create" class="btn btn-success">Agregar Capitulo</a>
            </Authorized>
        </AuthorizeView>
        <br/>
        <MudExpansionPanels>
            @foreach (var item in model.Chapters)
            {
                <MudExpansionPanel Text="@item.Title" >
                    <MudLink Href="@($"chapters/viewer/{item.Id}" )" Underline="Underline.None">@item.Title</MudLink>
                </MudExpansionPanel>
            }
        </MudExpansionPanels>
    </div>
}

@code {
    [Parameter] public int Id { get; set; }
    [Parameter] public string BookName { get; set; }
    private VisualiseBookDTO model;
    private int selectedVal = 0;

    private async Task OnVote(int voteSelected)
    {
        model.UserVote = voteSelected;
        var voteBook = new Votes() { Vote = voteSelected, BookId = Id };
        var responseHttp = await repository.Post("api/votes", voteBook);
        if (responseHttp.Error)
        {
            showMessages.ShowWarningMessage("No se ha procesado su voto");
        }
        else
        {
            showMessages.ShowSuccessMessage("Su voto ha sido recibido!");
        }
    }

    protected async override Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        //Include token in request to get Votes
        if (user.Identity.IsAuthenticated)
        {
            var responseHttp = await repository.Get<VisualiseBookDTO>($"api/books/{Id}");

            if (responseHttp.Error)
            {
                if (responseHttp.HttpResponseMessage.StatusCode == System.Net.HttpStatusCode.NotFound)
                {
                    navigateManager.NavigateTo("");
                }
                else
                {
                    var ErrorMensaje = await responseHttp.GetBody();
                    await showMessages.ShowErrorMessage(ErrorMensaje);
                }
            }
            else
            {
                model = responseHttp.Response;
            }
        }
        else
        {
            //Exclude token for users who's not authenticated
            var responseHttp = await repository.Get<VisualiseBookDTO>($"api/books/{Id}", includeToken: false);

            if (responseHttp.Error)
            {
                if (responseHttp.HttpResponseMessage.StatusCode == System.Net.HttpStatusCode.NotFound)
                {
                    navigateManager.NavigateTo("");
                }
                else
                {
                    var ErrorMensaje = await responseHttp.GetBody();
                    await showMessages.ShowErrorMessage(ErrorMensaje);
                }
            }
            else
            {
                model = responseHttp.Response;
            }
        }
    }

}
