@page "/books/{Id:int}"
@page "/books/{Id:int}/{BookName}"
@inject IRepository repository
@inject NavigationManager navigateManager
@inject IShowMessages showMessages


@if (model == null)
{
    <p>Cargando..</p>
}
else
{
    <h2>@model.Book.Name</h2>
    <MudPaper>
        <img src="@model.Book.Cover" width="250"/>
        </MudPaper>
    <MudDivider  />
    <div class="col-md-6">
        <br/>
        <a href="/chapter/create" class="btn btn-success">Agregar Capitulo</a>
        <br/>
           @*<ul class="list-group">
          </ul>*@
        <MudExpansionPanels>
            @foreach (var item in model.Chapters)
            {
                <MudExpansionPanel Text="@item.Title">
                    <MudLink Href="@($"chapters/viewer/{item.Id}" )" Underline="Underline.None">@item.Title</MudLink>
                </MudExpansionPanel>
            }
       </MudExpansionPanels>
        
    </div>
}

@code {
    [Parameter] public int Id { get; set; }
    [Parameter] public string BookName { get; set; }
    private VisualiseBookDTO model;

    protected async override Task OnInitializedAsync()
    {
        var responseHttp = await repository.Get<VisualiseBookDTO>($"api/books/{Id}", includeToken:false);

        if (responseHttp.Error)
        {
            if (responseHttp.HttpResponseMessage.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                navigateManager.NavigateTo("");
            }
            else
            {
                var ErrorMensaje = await responseHttp.GetBody();
                await showMessages.ShowErrorMessage(ErrorMensaje);
            }
        }
        else
        {
            model = responseHttp.Response;
        }

    }

}
