@page "/books/{Id:int}"
@page "/books/{Id:int}/{BookName}"
@inject IRepository repository
@inject NavigationManager navigateManager
@inject IShowMessages showMessages
@inject IDialogService dialogService
@inject IJSRuntime js
@inject AuthenticationStateProvider AuthenticationStateProvider


@if (model == null)
{
    <p>Cargando..</p>
}
else
{
     <MudPaper Outlined="true" MaxWidth="1000">
        <MudContainer Fixed="true" Class="d-flex flex-wrap">
            <div class="flex-column ">
                <MudImage Width="230" Src="@model.Book.Cover" Class="align-content-sm-center"   />
            
            </div>
            <div class="flex-row col-6 col-sm-6 col-md-6 col-lg-6" style="flex-grow:1; margin-left:15px;">
            <MudText Typo="Typo.h4">@model.Book.Name</MudText>
            <div class="flex-column col-12 col-sm-12 col-md-12 col-lg-12" style="flex-grow:1; ">

                
                <MudText Style="margin-bottom:20px;">@model.Book.Synopsis</MudText>
                @for (var i = 0; i < model.Genders.Count(); i++)
                {
                    @GenderLinks(model.Genders[i])
                }
            </div>
            </div>
            
        </MudContainer>
        <MudContainer Fixed="true" Class="row-cols-2">
            <Rating OnVote="OnVote" ScoreSelected="@model.UserVote" />
        </MudContainer>
        

    </MudPaper>
    <div class="col-12 col-sm-12 col-md-11 col-lg-9">
        <br/>
        <AuthorizeView Roles="admin">
            <Authorized>
                <a href="/chapter/create" class="btn btn-success">Agregar Capitulo</a>
            </Authorized>
        </AuthorizeView>
        <br/>
        <ListChapters model="model" DeleteChapter="DeleteChapters"></ListChapters>
    </div>
}

@code {
    [Parameter] public int Id { get; set; }
    [Parameter] public string? BookName { get; set; }
    private VisualiseBookDTO? model;
    private RenderFragment<Gender> GenderLinks = 
                (genders) => @<MudLink Href="@($"/buscar?genderid={genders.Id}")" Underline="Underline.None">
                                                        <MudChip Color="Color.Primary" >@genders.Name</MudChip></MudLink>;
    private int selectedVal = 0;
    

    private async Task OnVote(int voteSelected)
    {
        model.UserVote = voteSelected;
        var voteBook = new Votes() { Vote = voteSelected, BookId = Id };
        var responseHttp = await repository.Post("api/votes", voteBook);
        if (responseHttp.Error)
        {
            showMessages.ShowWarningMessage("No se ha procesado su voto");
        }
        else
        {
            showMessages.ShowSuccessMessage("Su voto ha sido recibido!");
        }
    }

    protected async override Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        
        //Include token in request to get Votes
        if (user.Identity.IsAuthenticated)
        {
            var responseHttp = await repository.Get<VisualiseBookDTO>($"api/books/{Id}");

            if (responseHttp.Error)
            {
                if (responseHttp.HttpResponseMessage.StatusCode == System.Net.HttpStatusCode.NotFound)
                {
                    navigateManager.NavigateTo("");
                }
                else
                {
                    var ErrorMensaje = await responseHttp.GetBody();
                    await showMessages.ShowErrorMessage(ErrorMensaje);
                }
            }
            else
            {
                model = responseHttp.Response;
            }
        }
        else
        {
            //Exclude token for users who's not authenticated
            var responseHttp = await repository.Get<VisualiseBookDTO>($"api/books/{Id}", includeToken: false);

            if (responseHttp.Error)
            {
                if (responseHttp.HttpResponseMessage.StatusCode == System.Net.HttpStatusCode.NotFound)
                {
                    navigateManager.NavigateTo("");
                }
                else
                {
                    var ErrorMensaje = await responseHttp.GetBody();
                    await showMessages.ShowErrorMessage(ErrorMensaje);
                }
            }
            else
            {
                model = responseHttp.Response;
            }
        }
    }

    async Task DeleteChapters(Chapter chapter)
    {
        var options = new DialogOptions { CloseButton = false, CloseOnEscapeKey = true, Position = DialogPosition.Center };
        var dialog = dialogService.Show<DeleteComicDialog>("Elimando Comic", options);
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            var responseHttp = await repository.Delete($"api/chapters/{chapter.Id}");
            if (responseHttp.Error)
            {
                await showMessages.ShowErrorMessage(await responseHttp.GetBody());
            }
            else
            {
                model.Chapters.Remove(chapter);
                await showMessages.ShowSuccessMessage($"Publicacion {chapter.Title} eliminada");
            }
        }
    }

}
