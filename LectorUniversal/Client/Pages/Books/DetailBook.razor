@page "/books/{Id:int}"
@page "/books/{Id:int}/{BookName}"
@inject IRepository repository
@inject NavigationManager navigateManager
@inject IShowMessages showMessages
@inject IDialogService dialogService
@inject IJSRuntime js
@inject AuthenticationStateProvider AuthenticationStateProvider


@if (model == null)
{
    <p>Cargando..</p>
}
else
{
     <MudPaper Outlined="true">
        <MudContainer Fixed="true" Class="d-flex flex-wrap">
            <div class="flex-column align-content-center">
                <MudImage Width="230" Src="@model.Book.Cover" Class="align-content-sm-center"  />
            
            </div>
            <div class="flex-row col-6 col-sm-6 col-md-6 col-lg-6" style="flex-grow:1; margin-left:15px;">
                <MudText Typo="Typo.h4">@model.Book.Name</MudText>
                <div class="flex-column col-12 col-sm-12 col-md-12 col-lg-12" style="flex-grow:1; ">

                
                    <MudText Style="margin-bottom:20px;" >@model.Book.Synopsis</MudText>
                    <MudText Typo="Typo.h6">Generos</MudText>
                    @for (var i = 0; i < model.Genders.Count(); i++)
                    {
                        @GenderLinks(model.Genders[i])
                    }
                    <MudText Typo="Typo.h6">Editorial</MudText>
                    <MudChip Color="Color.Primary">@model.Book.Editorial.Name</MudChip>
                    <MudText Typo="Typo.h6">Rating</MudText>
                    <Rating OnVote="OnVote" ScoreSelected="@model.UserVote" />
                </div>
            </div>
            
        </MudContainer>
        <MudContainer Fixed="true" Class="d-inline-flex align-content-center">
                <MudChipSet @bind-SelectedChip="selectedChip" Filter="true">
                    <MudChip Text="Leido" Color="Color.Success" OnClick="@(() => State(@selectedChip.Text))">Leido</MudChip>
                    <MudChip Text="Pendiente" Color="Color.Warning" OnClick="@(() => State(@selectedChip.Text))">Pendiente</MudChip>
                    <MudChip Text="Siguiendo" Color="Color.Info" OnClick="@(() => State(@selectedChip.Text))">Siguiendo</MudChip>
                    <MudChip Text="Abandonado" Color="Color.Error" OnClick="@(() => State(@selectedChip.Text))">Abandonado</MudChip>
                </MudChipSet>
        </MudContainer>
    </MudPaper>
    <div class="col-12 col-sm-12 col-md-11 col-lg-9">
        <br/>
        <AuthorizeView Roles="admin">
            <Authorized>
                <a href="@IdComic" class="btn btn-success">Agregar Capitulo</a>
            </Authorized>
        </AuthorizeView>
        <br/>
        <ListChapters model="model" DeleteChapter="DeleteChapters"></ListChapters>
    </div>
}

@code {
    [Parameter] public int Id { get; set; }
    [Parameter] public string? BookName { get; set; }
    private VisualiseBookDTO? model;
    private RenderFragment<Gender> GenderLinks = 
                (genders) => @<MudLink Href="@($"/buscar?genderid={genders.Id}")" Underline="Underline.None">
                                            <MudChip Color="Color.Primary" >@genders.Name</MudChip>
        </MudLink>
    ;
    private int selectedVal = 0;
    private string IdComic = string.Empty;
    MudChip? selectedChip;


    private async Task OnVote(int voteSelected)
    {
        model.UserVote = voteSelected;
        var voteBook = new Votes() { Vote = voteSelected, BookId = Id };
        var responseHttp = await repository.Post("api/votes", voteBook);
        if (responseHttp.Error)
        {
            showMessages.ShowWarningMessage("No se ha procesado su voto");
        }
        else
        {
            showMessages.ShowSuccessMessage("Su voto ha sido recibido!");
        }
    }

    private async Task State(string state)
    {
        model.BookState = state;
        var stateBook = new BookFollow() { BookState = state, BookId = Id };
        var responseHttp = await repository.Post("api/follow", stateBook);
         if (responseHttp.Error)
        {
            showMessages.ShowWarningMessage("No se ha procesado su clasificacion");
        }
        else
        {
            showMessages.ShowSuccessMessage("Su clasificacion ha sido recibida!");
        }
    }

    protected async override Task OnInitializedAsync()
    {
        IdComic = $"book/{Id}/chapter/create";
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        
        //Include token in request to get Votes
        if (user.Identity.IsAuthenticated)
        {
            var responseHttp = await repository.Get<VisualiseBookDTO>($"api/books/{Id}");

            if (responseHttp.Error)
            {
                if (responseHttp.HttpResponseMessage.StatusCode == System.Net.HttpStatusCode.NotFound)
                {
                    navigateManager.NavigateTo("");
                }
                else
                {
                    var ErrorMensaje = await responseHttp.GetBody();
                    await showMessages.ShowErrorMessage(ErrorMensaje);
                }
            }
            else
            {
                model = responseHttp.Response;
            }
        }
        else
        {
            //Exclude token for users who's not authenticated
            var responseHttp = await repository.Get<VisualiseBookDTO>($"api/books/{Id}", includeToken: false);

            if (responseHttp.Error)
            {
                if (responseHttp.HttpResponseMessage.StatusCode == System.Net.HttpStatusCode.NotFound)
                {
                    navigateManager.NavigateTo("");
                }
                else
                {
                    var ErrorMensaje = await responseHttp.GetBody();
                    await showMessages.ShowErrorMessage(ErrorMensaje);
                }
            }
            else
            {
                model = responseHttp.Response;
            }
        }
    }

    async Task DeleteChapters(Chapter chapter)
    {
        var options = new DialogOptions { CloseButton = false, CloseOnEscapeKey = true, Position = DialogPosition.Center };
        var dialog = dialogService.Show<DeleteComicDialog>("Elimando Comic", options);
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            var responseHttp = await repository.Delete($"api/chapters/{chapter.Id}");
            if (responseHttp.Error)
            {
                await showMessages.ShowErrorMessage(await responseHttp.GetBody());
            }
            else
            {
                model.Chapters.Remove(chapter);
                await showMessages.ShowSuccessMessage($"Publicacion {chapter.Title} eliminada");
            }
        }
    }

}
