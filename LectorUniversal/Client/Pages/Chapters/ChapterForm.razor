@inject IShowMessages showMessage
@inject IRepository repository

<EditForm Model="Chapter" OnSubmit="OnDataAnnotationsValidated">
    <div class="col-lg-10">
        <div class="form-group">
            @*<MudSelect T="BooksList" @bind-Value=@comicSelected Label="Comics">
                    <MudSelectItem Value="@Books.Key">@Books.Name</MudSelectItem>
            </MudSelect>*@
            <label>Comic:</label>
            <div>
                <InputSelect @bind-Value=@comicSelected>
                    <option value="0">---Seleccione un comic</option>
                    @foreach (var item in Books)
                    {
                      <option value="@item.Key">@item.Value</option>
                    }
                </InputSelect>
            </div>
        </div>
        <div class="form-group col-md-5">
            <label>Nombre de capitulo:</label>
            <div>
                <InputText class=form-control @bind-Value=@Chapter.Title></InputText>
            </div>
        </div>
        <div class="form-group col-md-5">
            <MultipleImages ImageSelected="ImageSelected"/>
        </div>
        <button type="submit" class="btn btn-success">Submit</button>
    </div>
</EditForm>

@code {
    [Parameter] public EventCallback OnValidSubmit { get; set; }
    [Parameter] public List<Book> BooksList { get; set; } = new List<Book>();
    [Parameter] public Chapter Chapter {  get;  set; }
    public Pages Pages { get; set; } = new Pages();
    private string Images;
    private string comicSelected = "0";

    private List<MultipleSelectorModel> Books { get; set; } = new List<MultipleSelectorModel>();

    protected override void OnInitialized()
    {
        Books = BooksList.Select(x => new MultipleSelectorModel(x.Id.ToString(),x.Name)).ToList();
    }

    private async Task ImageSelected(List<string> ImageBase64)
    {
        foreach (var item in ImageBase64)
        {
            Images = item;
        }
        Chapter.ChapterPages.Add(new Pages() { ImageUrl = Images });

    }

    private async Task OnDataAnnotationsValidated()
    {
        if (comicSelected == "0")
        {
            await showMessage.ShowErrorMessage("Debe seleccionar un Comic");
            return;
        }
        Chapter.BooksId = int.Parse(comicSelected);

        await OnValidSubmit.InvokeAsync(null);
    }
}
