@page "/chapters/viewer/{Id:int}"
@inject IRepository repository
@inject IShowMessages showMessage
@inject NavigationManager navigationManager


<div>
    <h3>@model.Book.Name</h3> | <h3>@model.Chapters.Select(x => x.Title).FirstOrDefault()</h3> 
</div>

@if (@MostrarForm != false)
{
    <MudContainer Fixed="true" Class="col-11 col-sm-12 col-md-11 col-lg-10 col-xl-6">
        <MudStack Spacing="1"    >
        @foreach (var item in ChapterPages)
        {
            <MudImage Src="@item.ImageUrl"  />
        }
        </MudStack>
    </MudContainer>
     <Pagination ></Pagination>
    <DisqusComments/>
}else
{
    <text>no hay registros</text>
}

@code {
    [Parameter] public int Id { get; set; }
    VisualiseBookDTO? model;
    List<Pages>? ChapterPages;
    private bool MostrarForm { get; set; } = false;

    protected async override Task OnInitializedAsync()
    {
        var responseHttp = await repository.Get<VisualiseBookDTO>($"api/chapters/viewer/{Id}", includeToken:false);

        if (responseHttp.Error)
        {
            if (responseHttp.HttpResponseMessage.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                navigationManager.NavigateTo("books");
            }
            else
            {
                await showMessage.ShowErrorMessage(await responseHttp.GetBody());
            }
        }
        else
        {
            model = responseHttp.Response;
            ChapterPages = model.Pages;
            StateHasChanged();
            MostrarForm = true;
        }
    }


}
