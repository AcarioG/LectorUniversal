@page "/chapters/viewer/{Id:int}"
@inject IRepository repository
@inject IShowMessages showMessage
@inject NavigationManager navigationManager


<h3>ChapterDetail</h3>

@if (@MostrarForm != false)
{
    <div>
        @*<img src="@model.Chapters.Select(x => x.ChapterPages.Select(c => c.ImageUrl))">*@
    </div>
    <MudStack Spacing="1" Justify="Justify.Center" Style="margin-left:290px;" >
        @foreach (var item in ChapterPages)
        {
            
            <img src="@item.ImageUrl" height="1200" width="750" />
        }
    </MudStack>
}else
{
    <text>no hay registros</text>
}




@code {
    [Parameter] public int Id { get; set; }
    VisualiseBookDTO model;
    List<Pages> ChapterPages;
    private bool MostrarForm { get; set; } = false;

    protected async override Task OnInitializedAsync()
    {
        var responseHttp = await repository.Get<VisualiseBookDTO>($"api/chapters/viewer/{Id}", includeToken:false);

        if (responseHttp.Error)
        {
            if (responseHttp.HttpResponseMessage.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                navigationManager.NavigateTo("books");
            }
            else
            {
                await showMessage.ShowErrorMessage(await responseHttp.GetBody());
            }
        }
        else
        {
            model = responseHttp.Response;
            ChapterPages = model.Pages;
            StateHasChanged();
            MostrarForm = true;
        }
    }
}
