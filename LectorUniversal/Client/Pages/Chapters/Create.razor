@page "/chapter/create"
@inject IRepository repository
@inject NavigationManager navigationManager
@inject IShowMessages showMessages


@if (@MostrarForm != false)
{
    <ChapterForm OnValidSubmit="CreateChapter" Chapter="Chapter" BooksList="BooksList" />
    
}
else
{
    <text>Cargando..</text>

}

@code {
    private bool MostrarForm { get; set; } = false;
    private Chapter Chapter = new Chapter();
    private List<Book> BooksList = new List<Book>();
    [Parameter] public int book { get; set; }

    protected async override Task OnInitializedAsync()
    {
        var httpResponse = await repository.Get<List<Book>>("api/books");
        BooksList = httpResponse.Response;

        StateHasChanged();
        MostrarForm = true;
    }

    private async Task CreateChapter()
    {
        var httpResponse = await repository.Post<Chapter, int>("api/chapters", Chapter);

        if (httpResponse.Error)
        {
            await showMessages.ShowErrorMessage(await httpResponse.GetBody());
        }
        else
        {
            var bookId = httpResponse.Response;
        }
    }
}
