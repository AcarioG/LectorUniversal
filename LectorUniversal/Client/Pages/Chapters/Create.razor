@page "/chapter/create"
@inject IRepository repository
@inject NavigationManager navigationManager
@inject IShowMessages showMessages
@*@attribute [Authorize(Roles ="admin")]*@

@if (@MostrarForm != false)
{
    <ChapterForm OnValidSubmit="CreateChapter" Chapter="Chapter" BooksList="BooksList" />
}
else
{
    <text>Cargando..</text>
}

@code {
    private bool MostrarForm { get; set; } = false;
    private Chapter Chapter = new Chapter();
    private Pages Pages = new Pages();
    private List<Book> BooksList = new List<Book>();
    [Parameter] public int book { get; set; }
    private List<string> ImagesUrl = new List<string>();

    protected async override Task OnInitializedAsync()
    {
        var httpResponse = await repository.Get<List<Book>>("api/books");
        BooksList = httpResponse.Response;

        StateHasChanged();
        MostrarForm = true;
    }

    private async Task CreateChapter()
    {
        foreach (var item in Chapter.ChapterPages)
        {
            ImagesUrl.Add(item.ImageUrl);
        }
        Chapter.ChapterPages.Clear();

        var httpsResponse = await repository.Post<Chapter,int>("api/chapters", Chapter);

        if (httpsResponse.Error)
        {
            await showMessages.ShowErrorMessage(await httpsResponse.GetBody());
        }
        else
        {
            var ChapterId = httpsResponse.Response;

            Pages.ChapterId = ChapterId;

            foreach (var item in ImagesUrl)
            {
                Pages.ImageUrl = item;
                await repository.Post<Pages>("api/pages", Pages);
            }

            navigationManager.NavigateTo($"chapters/viewer/{ChapterId}");
            await showMessages.ShowSuccessMessage("Capitulo creado exitosamente!");
        }
    }    
}
