@page "/users"
@inject IRepository repository
@inject IShowMessages showMessages
@inject AuthenticationStateProvider stateProvider
@attribute [Authorize(Roles = "admin")]

<h3>Users</h3>

    <MudContainer  Class="d-flex justify-center align-center">
        <MudTable Items="Users" Hover="true" Class="col-sm-4" Striped="true" Bordered="true" Dense="true">
            <HeaderContent>
                <MudTh Style="text-align:center">Users</MudTh>
                <MudTh></MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="UserName" Style="text-align:left" >@context.UserName</MudTd>
                <MudTd><MudIconButton Variant="Variant.Filled" Icon="@Icons.Material.Filled.ModeEdit" ButtonType="ButtonType.Button" Href="@($"user/edit/{context.UserId}")" Color="Color.Warning" Size="Size.Small"></MudIconButton></MudTd>
            </RowTemplate>
        </MudTable>
    </MudContainer>
@code {

    List<UserDTO> Users;

    protected override async Task OnInitializedAsync()
    {
        await LoadUsers();
    }

    private async Task LoadUsers()
    {
         var user = (await stateProvider.GetAuthenticationStateAsync()).User;
        if (user.Identity != null && user.Identity.IsAuthenticated)
        {
            if (user.IsInRole("admin"))
            {
                var httpResponse = await repository.Get<List<UserDTO>>($"api/users");

                if (httpResponse.Error)
                {
                    await showMessages.ShowErrorMessage(await httpResponse.GetBody());
                }
                else
                {
                    Users = httpResponse.Response;
                }
            }
        }
    }
}
