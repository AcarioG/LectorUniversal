@inject IShowMessages showMessages

@*@for (int i = 1; i < 5; i++)
{
    var stars = i;
    <span @onclick="(() => onclickHandle(stars))"
        @onmouseover="(() => onmouseoverHandle(stars))"
        style="cursor:pointer"
        class="">

    </span>
}*@
<MudRating SelectedValue="ScoreSelected" SelectedValueChanged="onclickHandle" />

@code {
    [Parameter] public int ScoreSelected { get; set; }
    [Parameter] public EventCallback<int> OnVote { get; set; }
    [CascadingParameter] public Task<AuthenticationState> authenticationState { get; set; }

    private async Task onclickHandle(int stars)
    {
        var authState = await authenticationState;
        if (authState.User.Identity.IsAuthenticated)
        {
            ScoreSelected = stars;
            await OnVote.InvokeAsync(ScoreSelected);
        }
        else
        {
            showMessages.ShowWarningMessage("Para usar esta funcionalidad, debe logearse.");
        }
    }
}
