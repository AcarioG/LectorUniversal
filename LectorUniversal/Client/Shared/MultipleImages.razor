@using System.IO
@using Tewr.Blazor.FileReader
@inject IFileReaderService fileReaderService

@*<div class="form-group">

    <div class="col-md-4">
        <label>@Label</label>
        <div>
            
            <InputFile id="fileInput" @ref="inputElement" OnChange="UploadFiles" hidden multiple />
            <input type="file" @ref="inputElement" @onchange="ImageFileSelected" accept=".jpg,.jpeg,.png" multiple/>
            <MudFab HtmlTag="label"
            Color="Color.Success"
            Icon="@Icons.Filled.AttachFile"
            for="fileInput"/>
        </div>
    </div>

    <div class="flex-wrap">
        @if (ImageBase64 != null)
        {
            <div>
                    @foreach (var item in @Images)
                    {
                        <div style="margin:10px;">
                            <img src="data:image/jpg;base64,@item" style="width:150px;" />
                        </div>
                    }
            </div>
        }
        @if (ImageBase64 == null)
        {
            <div>
                <div style="margin:10px;">
                    <img src="@ImageTemp" style="width:150px;" />
                </div>
            </div>
        }
    </div>
</div>*@

@code {
        [Parameter] public string Label { get; set; } = "Image";
    //[Parameter] public string? ImageTemp { get; set; }
    private string? ImageBase64;
    Chapter chapter = new Chapter();
    private List<string>? Images = new List<string>(); 
    [Parameter] public EventCallback<List<string>> ImageSelected { get; set; }
    ElementReference inputElement;


    //async Task ImageFileSelected()
    //{
    //    foreach (var file in await fileReaderService.CreateReference(inputElement).EnumerateFilesAsync())
    //    {
    //        using (MemoryStream memStream = await file.CreateMemoryStreamAsync(4 * 1024))
    //        {
    //            var bytesImage = new byte[memStream.Length];
    //            memStream.Read(bytesImage, 0, (int)memStream.Length);
    //            ImageBase64 = Convert.ToBase64String(bytesImage);
    //            //await ImageSelected.InvokeAsync(ImageBase64);
    //            ImageTemp = null;
    //            //StateHasChanged();
    //        }
    //    }
    //}
    async Task UploadFiles(InputFileChangeEventArgs e)
    {
        foreach (var file in e.GetMultipleFiles(int.MaxValue))
        {
            if(file.ContentType == "image/jpeg" || file.ContentType == "image/jpg")
            {
                var resizeImage = await file.RequestImageFileAsync(file.ContentType, 250, 130 );
                var buffer = new byte[resizeImage.Size];
                await resizeImage.OpenReadStream().ReadAsync(buffer);
                Images.Add(Convert.ToBase64String(buffer));
            }
            //files.Ad d (f ile);
        }
        //TODO upload the files to the server
    }
    //async Task OnFileChange(InputFileChangeEventArgs e)
    //{
    //    var format = "image/jpg";
    //    foreach (var item in e.GetMultipleFiles(int.MaxValue))
    //    {
    //        var resizeImage = await item.RequestImageFileAsync(format, 250, 130);
    //        var buffer = new byte[resizeImage.Size];
    //        await resizeImage.OpenReadStream().ReadAsync(buffer);
    //        Images.Add(Convert.ToBase64String(buffer));
    //        await ImageSelected.InvokeAsync(Images); 
    //    }
    //}
    async Task ImageFileSelected()
    {
        foreach (var file in await fileReaderService.CreateReference(inputElement).EnumerateFilesAsync())
        {
            using (MemoryStream memStream = await file.CreateMemoryStreamAsync(4 * 1024))
            {
                var bytesImage = new byte[memStream.Length];
                memStream.Read(bytesImage, 0, (int)memStream.Length);
                Images.Add(Convert.ToBase64String(bytesImage));
                await ImageSelected.InvokeAsync(Images);
                //ImageTemp = null;
                //StateHasChanged();
            }
        }
    }
}
