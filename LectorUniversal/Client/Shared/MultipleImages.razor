@using System.IO
@using Tewr.Blazor.FileReader
@inject IFileReaderService fileReaderService

<div class="form-group">

    <div class="col-md-4">
        <div>
            <input id="fileInput" type="file" @ref="inputElement" @onchange="ImageFileSelected" accept=".jpg,.jpeg,.png" hidden multiple/>
            <MudFab HtmlTag="label"
            Color="Color.Success"
            Icon="@Icons.Filled.AttachFile"
            for="fileInput"/>
        </div>
    </div>

    @if (Images != null)
    {
        <MudText Typo="@Typo.h6">@Images.Count() File@(Images.Count() == 1 ? "" : "s"):</MudText>
        <MudList>
            @foreach (var item in ImageInfo)
            {
            <MudListItem Icon="@Icons.Filled.AttachFile" @key="@item">
                @item
            </MudListItem>
            }
        </MudList>
    }

    @*<div class="flex-wrap">
        @if (ImageBase64 != null)
        {
            <div>
                    @foreach (var item in @Images)
                    {
                        <div style="margin:10px;">
                            <img src="data:image/jpg;base64,@item" style="width:150px;" />
                        </div>
                    }
            </div>
        }
        @if (ImageBase64 == null)
        {
            <div>
                <div style="margin:10px;">
                    <img src="@ImageTemp" style="width:150px;" />
                </div>
            </div>
        }
    </div>*@
</div>

@code {
    private List<string>? Images = new List<string>();
    private List<string>? ImageInfo = new List<string>();
    [Parameter] public EventCallback<List<string>> ImageSelected { get; set; }
    ElementReference inputElement;

    async Task ImageFileSelected()
    {
        foreach (var file in await fileReaderService.CreateReference(inputElement).EnumerateFilesAsync())
        {
            var x = await file.ReadFileInfoAsync();
            ImageInfo.Add(x.Name.ToString());
            using (MemoryStream memStream = await file.CreateMemoryStreamAsync(4 * 1024))
            {
                var bytesImage = new byte[memStream.Length];
                memStream.Read(bytesImage, 0, (int)memStream.Length);
                Images.Add(Convert.ToBase64String(bytesImage));
                await ImageSelected.InvokeAsync(Images);
                //StateHasChanged();
            }
        }
    }
}
