@inject IRepository repository
@inject IShowMessages showMessages
@inject IDialogService dialogService

<AuthorizeView Roles="admin">
    <Authorized>
        <div class="form-group" style="margin-top:50px;">
            <MudFab Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" Href="books/create" Label="Agregar Comic" Size="Size.Medium" />
        </div>
    </Authorized>
</AuthorizeView>
        
<div style="display: flex; flex-wrap: wrap; align-items:center;">
    <GenericList Lists="Books">
        <RecordFound Context="book" >
            <IndividualBook Books="book" DeleteBook="DeleteBook" />
        </RecordFound>
    </GenericList>
    
</div>

@code {
    [Parameter] public List<Book> Books { get; set; }

    async Task DeleteBook(Book book)
    {
        //var parameters = new DialogParameters();
        //parameters.Add("DialogContent", $"Esta seguro que desea eliminar el comic de {book.Name}?");

        var options = new DialogOptions { CloseButton = false, CloseOnEscapeKey = true, Position = DialogPosition.Center };
        var dialog = dialogService.Show<DeleteComicDialog>("Elimando Comic", options);
        var result = await dialog.Result;
        //js.InvokeAsync<bool>("confirm", "Esta seguro que desea eliminar este Comic?");
        if (!result.Cancelled)
        {
            var responseHttp = await repository.Delete($"api/books/{book.Id}");
            if (responseHttp.Error)
            {
                await showMessages.ShowErrorMessage(await responseHttp.GetBody());
            }
            else
            {
                Books.Remove(book);
                await showMessages.ShowSuccessMessage($"Comic de {book.Name} eliminado");
            }
        }
    }
}
