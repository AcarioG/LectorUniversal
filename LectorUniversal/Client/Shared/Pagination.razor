<nav aria-label="Page navigation">
  <ul class="pagination justify-content-center">
      @foreach (var link in Links)
     {
       <li onclick="@(() => PageSelectedIntern(link))"
            style="cursor: pointer;"
            class="page-item @(link.Active ? null : "disabled") @(link.Active ? "active" : null)">
            <span class="page-link" href="#">@link.Text</span>
       </li>
     }
  </ul>
</nav>

@code {
    [Parameter] public int ActualPage { get; set; } = 1;
    [Parameter] public int MaxPages { get; set; }
    [Parameter] public int Radio { get; set; } = 3;
    [Parameter] public EventCallback<int> PageSelected { get; set; }
    List<PaginationModel> Links = new List<PaginationModel>();

    private async Task PageSelectedIntern(PaginationModel pagination)
    {
        if (pagination.Page == ActualPage)
        {
            return;
        }

        if (!pagination.Enable)
        {
            return;
        }

        await PageSelected.InvokeAsync(pagination.Page);
    }

    protected override void OnParametersSet()
    {
        Links = new List<PaginationModel>();

        var previousLinkEnable = ActualPage != 1;
        var previousLink = ActualPage - 1;
        Links.Add(new PaginationModel(previousLink, previousLinkEnable, "Anterior"));

        for (var i = 1; i < MaxPages; i++)
        {
            if (i >= ActualPage - Radio && i <= ActualPage + Radio)
            {
                Links.Add(new PaginationModel(i){ Active = ActualPage == i });
            }
        }

        var nextLinkEnable = ActualPage != MaxPages;
        var nextLink = ActualPage + 1;
        Links.Add(new PaginationModel(nextLink, nextLinkEnable, "Siguiente"));
    }


    class PaginationModel
    {
        public PaginationModel(int page) 
            : this(page, true) 
        {}

        public PaginationModel(int page, bool enable)
            : this(page, enable, page.ToString())
        {}

        public PaginationModel(int page, bool enable, string text)
        {
            Page = page;
            Enable = enable;
            Text = text;
        }


        public string Text { get; set; }
        public int Page { get; set; }
        public bool Enable { get; set; } = true;
        public bool Active { get; set; } = false;
    }
}
